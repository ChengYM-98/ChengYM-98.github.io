<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兴趣使然的博客</title>
  
  <subtitle>你必须非常努力,才能看起来毫不费力</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-12T08:47:30.564Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ChengYM</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法</title>
    <link href="http://example.com/2022/11/12/14-pai-xu-suan-fa/"/>
    <id>http://example.com/2022/11/12/14-pai-xu-suan-fa/</id>
    <published>2022-11-12T08:33:19.000Z</published>
    <updated>2022-11-12T08:47:30.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><ul><li>时间复杂度：O(N2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li>在数据有序的时候时间复杂度可以达到O(n)。适用的情景为数据量量不大，对稳定性有要求，且数据基本有序的情况下。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><ul><li>时间复杂度：O(N2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li>适用于数据量不大，对算法的稳定性有要求，且数据局部或者整体有序的情况</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 双层循环，外循环控制未排序的元素，内循环控制已排序的元素，将未排序元素设为标杆，</span><span class="token comment" spellcheck="true">// 与已排序的元素进行比较，小于则交换位置，大于则位置不动</span><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li>时间复杂度：O(N2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li>当数据量不大，且对稳定性没有要求的时候，适用于选择排序</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 先假设第一个元素为最小的，然后通过循环找出最小元素，</span><span class="token comment" spellcheck="true">// 然后同第一个元素交换，接着假设第二个元素，重复上述操作即可</span><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ul><li>时间复杂度：O(NlongN)</li><li>空间复杂度：O(N)</li><li>稳定性：不稳定</li><li>常用于查找一组中前k大的数据</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 思想：他是一种分而治之的算法，找出一个参考值，通过递归的方式将数据一次分解为包含较小元素和较大元素的不同子序列，重复这个步骤直到所有数据都是有序的</span><span class="token comment" spellcheck="true">// 1.选择一个参考元素，将数组分割为两个子序列</span><span class="token comment" spellcheck="true">// 2.对序列重新排序，将所有小于基准的元素放在基准值的前面，大于基准值的元素放在基准值的右侧</span><span class="token comment" spellcheck="true">// 3.分别对小元素的子序列和较大元素的子序列重复步骤1，2</span><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><ul><li>时间复杂度：O(NlongN)</li><li>空间复杂度：O(N)</li><li>稳定性：稳定</li><li>常用于查找一组中前k大的数据</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 把长度为n的序列分成两个长度为n/2的子序列</span><span class="token comment" spellcheck="true">// 对这两个子序列分别采用归并排序</span><span class="token comment" spellcheck="true">// 将排序好的子序列合并程最终的有序序列</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>若n较小(如n≤50)，可采用直接插入或直接选择排序。</li><li>当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插人，应选直接选择排序为宜。</li><li>若文件初始状态基本有序(指正序)，则应选用直接插人、冒泡或随机的快速排序为宜；</li><li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。</li><li>快速排序是目前基于比较的内部排序中被认为是最好的方法，当待排序的关键字是随机分布时，快速排序的平均时间最短；</li><li>堆排序所需的辅助空间少于快速排序，并且不会出现快速排序可能出现的最坏情况。这两种排序都是不稳定的。</li><li>若要求排序稳定，则可选用归并排序。但前面介绍的从单个记录起进行两两归并的排序算法并不值得提倡，通常可以将它和直接插入排序结合在一起使用。先利用直接插入排序求得较长的有序子序列，然后再两两归并之。因为直接插入排序是稳定 的，所以改进后的归并排序仍是稳定的。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度：O(N2)&lt;/li&gt;
&lt;li&gt;空间复杂度：O(1)&lt;/li&gt;
&lt;li&gt;稳定性：稳定&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>TS</title>
    <link href="http://example.com/2022/11/12/13-ts/"/>
    <id>http://example.com/2022/11/12/13-ts/</id>
    <published>2022-11-12T03:37:26.000Z</published>
    <updated>2022-11-12T07:30:44.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TypeScript中的基本类型"><a href="#TypeScript中的基本类型" class="headerlink" title="TypeScript中的基本类型"></a><strong>TypeScript中的基本类型</strong></h2><p>TypeScript中的基本类型：</p><ul><li><p>类型声明</p><ul><li><p>类型声明是TS非常重要的一个特点；</p></li><li><p>通过类型声明可以指定TS中变量（参数、形参）的类型；</p></li><li><p>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错；</p></li><li><p>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值；</p></li><li><p>语法：</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span><span class="token keyword">let</span> 变量<span class="token punctuation">:</span> 类型 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">,</span> 参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">:</span> 类型<span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>自动类型判断</p><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul></li><li><p>类型：</p><table><thead><tr><th align="center"><strong>类型</strong></th><th align="center"><strong>例子</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">number</td><td align="center">1, -33, 2.5</td><td align="center">任意数字</td></tr><tr><td align="center">string</td><td align="center">‘hi’, “hi”, <code>hi</code></td><td align="center">任意字符串</td></tr><tr><td align="center">boolean</td><td align="center">true、false</td><td align="center">布尔值true或false</td></tr><tr><td align="center">字面量</td><td align="center">其本身</td><td align="center">限制变量的值就是该字面量的值</td></tr><tr><td align="center">any</td><td align="center">*</td><td align="center">任意类型</td></tr><tr><td align="center">unknown</td><td align="center">*</td><td align="center">类型安全的any</td></tr><tr><td align="center">void</td><td align="center">空值（undefined）</td><td align="center">没有值（或undefined）</td></tr><tr><td align="center">never</td><td align="center">没有值</td><td align="center">不能是任何值</td></tr><tr><td align="center">object</td><td align="center">{name:’孙悟空’}</td><td align="center">任意的JS对象</td></tr><tr><td align="center">array</td><td align="center">[1,2,3]</td><td align="center">任意JS数组</td></tr><tr><td align="center">tuple</td><td align="center">[4,5]</td><td align="center">元素，TS新增类型，固定长度数组</td></tr><tr><td align="center">enum</td><td align="center">enum{A, B}</td><td align="center">枚举，TS中新增类型</td></tr></tbody></table></li><li><p>number</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hex<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binary<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span class="token keyword">let</span> big<span class="token punctuation">:</span> bigint <span class="token operator">=</span> 100n<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>boolean</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>string</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token keyword">let</span> fullName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Bob Bobbington`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>字面量</p><ul><li><p>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围</p></li><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token operator">|</span> <span class="token string">'blue'</span> <span class="token operator">|</span> <span class="token string">'black'</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>any</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> d<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>unknown</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>void</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>never</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>object（没啥用）</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>array</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>tuple</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </code></pre></li></ul></li><li><p>enum</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Green<span class="token punctuation">,</span>  Blue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>  Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>类型断言</p><ul><li><p>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：</p><ul><li><p>第一种</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li></ul></li><li><p>第二种</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> unknown <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre></li></ul></li></ul></li></ul></li></ul><h2 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h2><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><p>示例：</p><pre class=" language-powershell"><code class="language-powershell">  tsc xxx<span class="token punctuation">.</span>ts <span class="token operator">-</span>w</code></pre><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</p><p><strong>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</strong></p><p>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</p><p>配置选项：</p><h4 id="include"><a href="#include" class="headerlink" title="include"></a><strong>include</strong></h4><ul><li>定义希望被编译文件所在的目录</li><li>默认值：[“**/*“]</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"include"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"src/**/*"</span><span class="token punctuation">,</span> <span class="token string">"tests/**/*"</span><span class="token punctuation">]</span></code></pre><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p><h4 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a><strong>exclude</strong></h4><ul><li>定义需要排除在外的目录</li><li>默认值：[“node_modules”, “bower_components”, “jspm_packages”]</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json">  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/hello/**/*"</span><span class="token punctuation">]</span></code></pre><p>上述示例中，src下hello目录下的文件都不会被编译</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a><strong>extends</strong></h4><ul><li>定义被继承的配置文件</li></ul><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"./configs/base"</span></code></pre><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p><h4 id="files"><a href="#files" class="headerlink" title="files"></a><strong>files</strong></h4><ul><li>指定被编译文件的列表，<strong>只有需要编译的文件少时才会用到</strong></li></ul><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"core.ts"</span><span class="token punctuation">,</span>    <span class="token string">"sys.ts"</span><span class="token punctuation">,</span>    <span class="token string">"types.ts"</span><span class="token punctuation">,</span>    <span class="token string">"scanner.ts"</span><span class="token punctuation">,</span>    <span class="token string">"parser.ts"</span><span class="token punctuation">,</span>    <span class="token string">"utilities.ts"</span><span class="token punctuation">,</span>    <span class="token string">"binder.ts"</span><span class="token punctuation">,</span>    <span class="token string">"checker.ts"</span><span class="token punctuation">,</span>    <span class="token string">"tsc.ts"</span>  <span class="token punctuation">]</span></code></pre><ul><li>列表中的文件都会被TS编译器所编译</li></ul><h4 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h4><ul><li>编译选项是配置文件中非常重要也比较复杂的配置选项</li><li>在compilerOptions中包含多个子选项，用来完成对编译的配置</li></ul><p>项目选项：</p><ul><li><p>target</p><ul><li><p>设置ts代码编译的目标版本</p></li><li><p>可选值：</p><ul><li>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</p></li></ul></li><li><p>lib</p><ul><li><p>指定代码运行时所包含的库（宿主环境）</p></li><li><p>可选值：</p><ul><li>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES6"</span><span class="token punctuation">,</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ES6"</span><span class="token punctuation">,</span> <span class="token string">"DOM"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/aa.js"</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>module</p><ul><li><p>设置编译后代码使用的模块化系统</p></li><li><p>可选值：</p><ul><li>CommonJS、UMD、AMD、System、ES2020、ESNext、None</li></ul></li><li><p>示例：</p><ul><li><pre class=" language-typescript"><code class="language-typescript"><span class="token string">"compilerOptions"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"module"</span><span class="token punctuation">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>outDir</p><ul><li><p>编译后文件的所在目录</p></li><li><p>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"dist"</span><span class="token punctuation">}</span></code></pre></li><li><p>设置后编译后的js文件将会生成到dist目录</p></li></ul></li></ul></li><li><p>outFile</p><ul><li><p>将所有的文件编译为一个js文件</p></li><li><p>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"dist/app.js"</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>rootDir</p><ul><li><p>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./src"</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>allowJs</p><ul><li>是否对js文件编译</li></ul></li><li><p>checkJs</p><ul><li><p>是否对js文件进行检查</p></li><li><p>示例：</p><ul><li><pre class=" language-json"><code class="language-json"><span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul></li><li><p>removeComments</p><ul><li>是否删除注释</li><li>默认值：false</li></ul></li><li><p>noEmit</p><ul><li>不对代码进行编译</li><li>默认值：false</li></ul></li><li><p>sourceMap</p><ul><li>是否生成sourceMap</li><li>默认值：false</li></ul></li><li><p>严格检查</p><ul><li>strict<ul><li>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li></ul></li><li>alwaysStrict<ul><li>总是以严格模式对代码进行编译</li></ul></li><li>noImplicitAny<ul><li>禁止隐式的any类型</li></ul></li><li>noImplicitThis<ul><li>禁止类型不明确的this</li></ul></li><li>strictBindCallApply<ul><li>严格检查bind、call和apply的参数列表</li></ul></li><li>strictFunctionTypes<ul><li>严格检查函数的类型</li></ul></li><li>strictNullChecks<ul><li>严格的空值检查</li></ul></li><li>strictPropertyInitialization<ul><li>严格检查属性是否初始化</li></ul></li></ul></li><li><p>额外检查</p><ul><li>noFallthroughCasesInSwitch<ul><li>检查switch语句包含正确的break</li></ul></li><li>noImplicitReturns<ul><li>检查函数没有隐式的返回值</li></ul></li><li>noUnusedLocals<ul><li>检查未使用的局部变量</li></ul></li><li>noUnusedParameters<ul><li>检查未使用的参数</li></ul></li></ul></li><li><p>高级</p><ul><li>allowUnreachableCode<ul><li>检查不可达代码</li><li>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li></ul></li><li>noEmitOnError<ul><li>有错误的情况下不进行编译</li><li>默认值：false</li></ul></li></ul></li></ul><h2 id="TypeScript打包"><a href="#TypeScript打包" class="headerlink" title="TypeScript打包"></a>TypeScript打包</h2><h3 id="webpack整合"><a href="#webpack整合" class="headerlink" title="webpack整合"></a>webpack整合</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包；</p><p>TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS；</p><p>步骤如下：</p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>进入项目根目录，执行命令 <code> npm init -y</code>，创建package.json文件</p><h4 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h4><p>命令如下：</p><p><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code></p><p>共安装了7个包:</p><ul><li>webpack：构建工具webpack</li><li>webpack-cli：webpack的命令行工具</li><li>webpack-dev-server：webpack的开发服务器</li><li>typescript：ts编译器</li><li>ts-loader：ts加载器，用于在webpack中编译ts文件</li><li>html-webpack-plugin：webpack中html插件，用来自动创建html文件</li><li>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</li></ul><h4 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h4><p>根目录下创建webpack的配置文件<code>webpack.config.js</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>   optimization<span class="token punctuation">:</span><span class="token punctuation">{</span>       minimize<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭代码压缩，可选</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   entry<span class="token punctuation">:</span> <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>   devtool<span class="token punctuation">:</span> <span class="token string">"inline-source-map"</span><span class="token punctuation">,</span>   devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>       contentBase<span class="token punctuation">:</span> <span class="token string">'./dist'</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   output<span class="token punctuation">:</span> <span class="token punctuation">{</span>       path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       filename<span class="token punctuation">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>       environment<span class="token punctuation">:</span> <span class="token punctuation">{</span>           arrowFunction<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 关闭webpack的箭头函数，可选</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>       extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".ts"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   module<span class="token punctuation">:</span> <span class="token punctuation">{</span>       rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">{</span>               test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>               use<span class="token punctuation">:</span> <span class="token punctuation">{</span>                   loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>               exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>           <span class="token punctuation">}</span>       <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>           title<span class="token punctuation">:</span><span class="token string">'TS测试'</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="配置TS编译选项"><a href="#配置TS编译选项" class="headerlink" title="配置TS编译选项"></a>配置TS编译选项</h4><p>根目录下创建tsconfig.json，配置可以根据自己需要</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"ES2015"</span><span class="token punctuation">,</span>       <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="修改package-json配置"><a href="#修改package-json配置" class="headerlink" title="修改package.json配置"></a>修改package.json配置</h4><p>修改package.json添加如下配置</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>   ...   <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>       <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>       <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>       <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack serve --open chrome.exe"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   ...<span class="token punctuation">}</span></code></pre><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译；</p><p>或者执行<code>npm start</code>来启动开发服务器；</p><br><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>除了webpack，开发中还经常需要结合babel来对代码进行转换；</p><p>以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中；</p><blockquote><p>  虽然TS在编译时也支持代码转换，但是只支持简单的代码转换；</p><p>  对于例如：Promise等ES6特性，TS无法直接转换，这时还要用到babel来做转换；<br>安装依赖包：</p></blockquote><p>   <code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code></p><p>共安装了4个包，分别是：</p><ul><li><p>@babel/core：babel的核心工具</p></li><li><p>@babel/preset-env：babel的预定义环境</p></li><li><p>@babel-loader：babel在webpack中的加载器</p></li><li><p>core-js：core-js用来使老版本的浏览器支持新版ES语法</p></li></ul><p>修改webpack.config.js配置文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            test<span class="token punctuation">:</span> <span class="token regex">/\.ts$/</span><span class="token punctuation">,</span>            use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                    options<span class="token punctuation">:</span><span class="token punctuation">{</span>                        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>                            <span class="token punctuation">[</span>                                <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>                                    <span class="token string">"targets"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                                        <span class="token string">"chrome"</span><span class="token punctuation">:</span> <span class="token string">"58"</span><span class="token punctuation">,</span>                                        <span class="token string">"ie"</span><span class="token punctuation">:</span> <span class="token string">"11"</span>                                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                                    <span class="token string">"corejs"</span><span class="token punctuation">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>                                    <span class="token string">"useBuiltIns"</span><span class="token punctuation">:</span> <span class="token string">"usage"</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">]</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span> <span class="token string">"ts-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><p>如此一来，使用ts编译后的文件将会再次被babel处理；</p><p>使得代码可以在大部分浏览器中直接使用；</p><p>同时可以在配置选项的targets中指定要兼容的浏览器版本；</p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>要想面向对象，操作对象，首先便要拥有对象；</p><p>要创建对象，必须要先定义类，所谓的类可以理解为对象的模型；</p><p>程序中可以根据类创建指定类型的对象；</p><p>举例来说：</p><p>可以通过Person类来创建人的对象，通过Dog类创建狗的对象，不同的类可以用来创建不同的对象；</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> 类名 <span class="token punctuation">{</span>    属性名<span class="token punctuation">:</span> 类型<span class="token punctuation">;</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>参数<span class="token punctuation">:</span> 类型<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>属性名 <span class="token operator">=</span> 参数<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">方法名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">...</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例：</p><pre class=" language-typescript"><code class="language-typescript">    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>        age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>            <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>使用类：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>可以使用<code>constructor</code>定义一个构造器方法；</p><blockquote><p>  <strong>注1：在TS中只能有一个构造器方法！</strong><br>例如：</p></blockquote><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同时也可以直接将属性定义在构造函数中：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面两种定义方法是完全相同的！</p><p><strong>注2：子类继承父类时，必须调用父类的构造方法（如果子类中也定义了构造方法）！</strong></p><p>例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">X</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果在X类中不调用<code>super</code>将会报错！</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</p><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</p><ul><li><p>静态属性（static）：</p><ul><li>声明为static的属性或方法不再属于实例，而是属于类的属性；</li></ul></li><li><p>只读属性（readonly）：</p><ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li><p>TS中属性具有三种修饰符：</p><ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li></ul><p>示例：</p><p>public：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写或什么都不写都是public</span>    <span class="token keyword">public</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在类中修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以通过对象修改</span></code></pre><p>protected：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中可以修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不能修改</span></code></pre><p>private：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以修改</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`大家好，我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子类中不能修改</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不能修改</span></code></pre><h3 id="属性存取器"><a href="#属性存取器" class="headerlink" title="属性存取器"></a>属性存取器</h3><p>对于一些不希望被任意修改的属性，可以将其设置为private</p><p>直接将其设置为private将导致无法再通过对象修改其中的属性</p><p>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</p><p>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> _name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'孙悟空'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用getter方法读取name属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实际通过调用setter方法修改name属性 </span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'猪八戒'</span><span class="token punctuation">;</span> </code></pre><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</p><p>静态属性（方法）使用static开头</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Tools</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Tools<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>在类中，使用this表示当前对象</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承时面向对象中的又一个特性</p><p>通过继承可以将其他类中的属性和方法引入到当前类中</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过继承可以在不修改类的情况下完成对类的扩展</p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</p><p>示例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`父类中的run方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在汪汪叫！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`子类中的run方法，会重写父类中的run方法！`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>在子类中可以使用super来完成对父类的引用</strong></p><h3 id="抽象类（abstract-class）"><a href="#抽象类（abstract-class）" class="headerlink" title="抽象类（abstract class）"></a>抽象类（abstract class）</h3><p>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>  abstract <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'动物在叫~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animals</span><span class="token punctuation">{</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'狗在跑~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现;</p><h2 id="接口（Interface）"><a href="#接口（Interface）" class="headerlink" title="接口（Interface）"></a>接口（Interface）</h2><p>接口的作用类似于抽象类，不同点在于：接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法；</p><p>接口主要负责定义一个类的结构，接口可以去限制一个对象的接口：对象只有包含接口中定义的所有属性和方法时才能匹配接口；</p><p>同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性；</p><p>示例（检查对象类型）：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>per<span class="token punctuation">:</span> Person<span class="token punctuation">)</span><span class="token punctuation">{</span>    per<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello, 我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>示例（实现）：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>   <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'大家好，我是'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="泛型（Generic）"><a href="#泛型（Generic）" class="headerlink" title="泛型（Generic）"></a>泛型（Generic）</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定）；</p><p>此时泛型便能够发挥作用；</p><p>举个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的；</p><p>由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的：</p><p>首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型；</p><h3 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h3><h4 id="创建泛型函数"><a href="#创建泛型函数" class="headerlink" title="创建泛型函数"></a>创建泛型函数</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的<code>&lt;T&gt;</code>就是泛型；</p><p>T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型；</p><p>所以泛型其实很好理解，就表示某个类型；</p><p>那么如何使用上边的函数呢？</p><h4 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h4><h5 id="方式一（直接使用）："><a href="#方式一（直接使用）：" class="headerlink" title="方式一（直接使用）："></a>方式一（直接使用）：</h5><pre class=" language-typescript"><code class="language-typescript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</p><h5 id="方式二（指定类型）："><a href="#方式二（指定类型）：" class="headerlink" title="方式二（指定类型）："></a>方式二（指定类型）：</h5><pre class=" language-typescript"><code class="language-typescript">test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>也可以在函数后手动指定泛型；</p><h4 id="函数中声明多个泛型"><a href="#函数中声明多个泛型" class="headerlink" title="函数中声明多个泛型"></a>函数中声明多个泛型</h4><p>可以同时指定多个泛型，泛型间使用逗号隔开：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> K<span class="token operator">></span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> T<span class="token punctuation">,</span> b<span class="token punctuation">:</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span> K<span class="token punctuation">{</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>test<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用；</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>类中同样可以使用泛型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>  prop<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>prop<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>prop <span class="token operator">=</span> prop<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><p>除此之外，也可以对泛型的范围进行约束</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">MyInter</span><span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> test<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">MyInter</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用；</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TypeScript中的基本类型&quot;&gt;&lt;a href=&quot;#TypeScript中的基本类型&quot; class=&quot;headerlink&quot; title=&quot;TypeScript中的基本类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;TypeScript中的基本类型&lt;/strong&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="前端进阶" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>工作总结</title>
    <link href="http://example.com/2022/11/11/12-gong-zuo-zong-jie/"/>
    <id>http://example.com/2022/11/11/12-gong-zuo-zong-jie/</id>
    <published>2022-11-11T12:10:30.000Z</published>
    <updated>2022-11-12T07:30:37.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-07-2022-08-上海万得信息技术有限公司"><a href="#2021-07-2022-08-上海万得信息技术有限公司" class="headerlink" title="2021.07-2022.08 上海万得信息技术有限公司"></a>2021.07-2022.08 上海万得信息技术有限公司</h1><p>在司期间，在维护一个基于Echarts的图形组件库：<strong>Wind Charts Builder</strong></p><h2 id="1-成果展示"><a href="#1-成果展示" class="headerlink" title="1. 成果展示"></a>1. 成果展示</h2><p><img src="/../../../../images/a80fd58bfed6be121b45c291e339825c78bca040543530e065a04ff64abcc413.png" alt="图形设置面板"><br><img src="/../../../../images/bd1a4769cf2fee19b934b697d40218dacbee621a4a33a1c67eb265f83750bf71.png" alt="标签面板">  </p><h2 id="2-工作内容"><a href="#2-工作内容" class="headerlink" title="2. 工作内容"></a>2. 工作内容</h2><ol><li>组件功能开发迭代</li><li>客户需求实现、反馈</li><li>部门组件对接</li><li>线上文档更新</li></ol><h2 id="3-项目遇到的难点、优化项："><a href="#3-项目遇到的难点、优化项：" class="headerlink" title="3. 项目遇到的难点、优化项："></a>3. 项目遇到的难点、优化项：</h2><ol><li><p>该项目是一个运行多年的项目，在为了应付一些历史需求时，提供了多套入参模板，造成了参数、逻辑混乱，项目难以维护；</p><p><strong>解决办法</strong>：在data入口处增添parse解析函数，将多种模板解析为一套通用的模板，以此在程序中运行一套统一的模板数据。</p></li><li><p>因底层插件基于Echarts，可能面对某些Echarts无法完成的需求。</p><p><strong>解决办法</strong>：</p><p>1、修改Echarts源码；<br>例如：<br>堆叠柱图时上下边框重叠；<br>雷达图轴末端添加线条样式；</p><p>2、绕开Echarts的逻辑，调用zrender实现需求，<br>例如：最新值标签的实现。</p></li><li><p>用户点击指标重命名部分时卡顿；</p><p> <strong>解决办法</strong>：</p><p> 1、添加控件防抖；</p><p> 2、在指标单击事件时发现触发了只需要在特定条件下执行的函数(拆饼时传递饼图指标名称)，在此做了拦截。</p></li><li><p>moment解析周频数据时会面临一种情况：2021年最后一周（53周）位于本年超过3.5天的情况会将下一年的前几天算入53周，造成2022年的数据乱入至2021年，在图形频率转换时出错；</p><p><strong>解决办法</strong>：对最后一周做特殊处理。</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2021-07-2022-08-上海万得信息技术有限公司&quot;&gt;&lt;a href=&quot;#2021-07-2022-08-上海万得信息技术有限公司&quot; class=&quot;headerlink&quot; title=&quot;2021.07-2022.08 上海万得信息技术有限公司&quot;&gt;&lt;/a&gt;20</summary>
      
    
    
    
    <category term="工作总结" scheme="http://example.com/categories/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="工作总结" scheme="http://example.com/tags/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SEO优化</title>
    <link href="http://example.com/2022/11/07/11-seo-you-hua-hui-zong/"/>
    <id>http://example.com/2022/11/07/11-seo-you-hua-hui-zong/</id>
    <published>2022-11-07T07:37:35.000Z</published>
    <updated>2022-11-12T08:16:59.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title、alt、h1"><a href="#title、alt、h1" class="headerlink" title="title、alt、h1"></a>title、alt、h1</h1><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><pre><code>网站头部标签&lt;head&gt;下的title,网站名称备注：这里为什么不说标签中的title属性，虽然鼠标上移可以显示图片名字，但是它跟SEO没一丝联系所以我们不关注它。</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片名称<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> </code></pre><h2 id="alt"><a href="#alt" class="headerlink" title="alt"></a>alt</h2><pre><code>当网络速度很慢，或者图片地址失效的时候，它可以在图片展示的位置上显示该图片的名称，同时也能让用户知道该位置是什么商品。同时为图片设置高度和宽度，可提高页面的加载速度。</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>一张图片.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>一张图片<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h2><pre><code>h1标签自带权重“蜘蛛” 认为它最重要，一个页面有且最多只能有一个h1标签，放在该页面最重要的标题上面，如首页的logo上可以加H1标签。副标题用 标签, 而其它地方不应该随便乱用 h 标题标签。</code></pre><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><h1 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h1><h2 id="property属性"><a href="#property属性" class="headerlink" title="property属性"></a>property属性</h2><ol><li><p>og描述：og是一种新的HTTP头部标记，即Open Graph Protocol，这种协议可以让网页成为一个“富媒体对象”。</p></li><li><p>OG主要标签属性</p><ul><li>og:title 网站名称</li><li>og:type (website)</li><li>og:image (logo图)</li><li>og:url 网站地址(例如：<a href="https://music.163.com/">https://music.163.com/</a>)</li><li>og:site_name 页面所在网站名(例如：网易云音乐)</li></ul></li><li><p>作用：使用Meta Property=og标签，就代表同意了网页内容可以被其他社会化网站引用，对于谷歌seo有一定的帮助。</p></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>og:title<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h2><p>作用： 因为它给搜索引擎传递重要的信息，搜索引擎通过阅读它来了解网页的大意，并且时常引用它来作为搜索结果中的“网页摘抄”提供给搜索者。</p><ol><li>keywords：向搜索引擎说明你的网页的关键词</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>keywords<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐，音乐，播放器，网易，下载，播放，DJ，免费，明星，精选，歌单，识别音乐，收藏，分享音乐，音乐互动，高音质，320K，音乐社交，官网，music.163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="2"><li>description：告诉搜索引擎你的站点的主要内容</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>description<span class="token punctuation">'</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐是一款专注于发现与分享的音乐产品，依托专业音乐人、DJ、好友推荐及社交功能，为用户打造全新的音乐生活。<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>网站作者：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="4"><li>优先打开edge和chrome浏览器</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE <span class="token punctuation">=</span> edge, chrome <span class="token punctuation">=</span> 1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="5"><li>禁用移动端缩放</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="text-indent-css优化"><a href="#text-indent-css优化" class="headerlink" title="text-indent css优化"></a>text-indent css优化</h1><h2 id="作用：用css将h1标签行内缩进到页面看不见-隐藏起来-，隐式新增网站关键字，一般这种标签加在logo里。sohu和阿里巴巴就是这种方法"><a href="#作用：用css将h1标签行内缩进到页面看不见-隐藏起来-，隐式新增网站关键字，一般这种标签加在logo里。sohu和阿里巴巴就是这种方法" class="headerlink" title="作用：用css将h1标签行内缩进到页面看不见(隐藏起来)，隐式新增网站关键字，一般这种标签加在logo里。sohu和阿里巴巴就是这种方法."></a>作用：用css将h1标签行内缩进到页面看不见(隐藏起来)，隐式新增网站关键字，一般这种标签加在logo里。sohu和阿里巴巴就是这种方法.</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>网易云音乐<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-indent</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>网易云音乐<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h1 id="页面文章添加链接到自家的子网站-也有人称之为友链"><a href="#页面文章添加链接到自家的子网站-也有人称之为友链" class="headerlink" title="页面文章添加链接到自家的子网站(也有人称之为友链)"></a>页面文章添加链接到自家的子网站(也有人称之为友链)</h1><p>同时给关键字加上字体颜色和下划线，诱导用户点击跳转，子链接被点击多了该子网站排名也靠前了，后面只要一搜关键字很容易就查到当前子链接的网站。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://juejin.cn/news/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>掘金文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>是一个帮助开发者成长的社区,是给开发者用的 Hacker News<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h1 id="HTML5新增的语义化标签"><a href="#HTML5新增的语义化标签" class="headerlink" title="HTML5新增的语义化标签"></a>HTML5新增的语义化标签</h1><ol><li>header：标签定义“网页”或“section”的页眉。</li><li>nav：定义导航链接的部分。</li><li>footer标签：代表“网页”或“section”的页脚。</li><li>section标签：定义文档中含有标题和段落的区域。（强调分段或分块）</li><li>article：代表独立、完整、可独自被外部引用的内容（博客或报刊中的文章、一遍论坛帖子、一段用户评论或独立的插件、或任何独立的内容）;（强调的是独立性！可含有完整的标题、内容、脚注)</li><li>aside标签：表示当前页面或文章的附属信息部分，可包含于当前页面或主要内容相关的引用、侧边栏、广告、导航条、以及其他类似的有别于主要内容的部分。(用于article标签之内，此时表示的是该独立内容的附属信息部分)；</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>导航一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span></code></pre><h1 id="百度搜索资源平台"><a href="#百度搜索资源平台" class="headerlink" title="百度搜索资源平台"></a>百度搜索资源平台</h1><p>网址： <a href="https://ziyuan.baidu.com/site/index#/">https://ziyuan.baidu.com/site/index#/</a><br>进入后点击页面顶部导航栏 用户中心 -&gt; 左侧站点管理 -&gt; 添加网站 -&gt; 按流程操作到后面网站验证成功。<br>验证成功后点击页面顶部导航栏 搜索服务 -&gt; 左侧搜索展现 -&gt; 站点属性 -&gt; 都给设置上（例如：上传公司logo，还有关联主体(你所在公司)。这个关联主体需要上传公司的相关隐私信息）。<br>以上搞好后就可以进行查看已添加的网站周期性的展现量了。</p><p>题外话：其实在 “搜索服务”模块里还有很多可以增加网站收录的方法，感兴趣的同学可以查查其他作者的资料研究下哈。搜狐和百家号以及其他网站也是可以像百度资源平台一样的，几个资源平台多管齐下更容易让我们的网站更容易被爬虫爬到，提升网站搜索排名。</p><h1 id="SEO测试工具，浏览器自带的"><a href="#SEO测试工具，浏览器自带的" class="headerlink" title="SEO测试工具，浏览器自带的"></a>SEO测试工具，浏览器自带的</h1><p>Edge和Chrome都有自带的：这个工具可以帮你检测出网站还有哪些需要优化的地方，性能、SEO等，免费又实用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上这些seo优化有利于搜索引擎爬虫的获取，让网站更容易被用户搜索到，点击量多了网站搜索权重自然就上去了同时排名也靠前了。(注意: 有效点击会增加搜索权重，无效点击不会，无效点击同一个IP多次点击)。还有一点：关键字越多越容易被爬虫检索到。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;title、alt、h1&quot;&gt;&lt;a href=&quot;#title、alt、h1&quot; class=&quot;headerlink&quot; title=&quot;title、alt、h1&quot;&gt;&lt;/a&gt;title、alt、h1&lt;/h1&gt;&lt;h2 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; c</summary>
      
    
    
    
    <category term="前端进阶" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="SEO优化" scheme="http://example.com/tags/SEO%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>react源码解析</title>
    <link href="http://example.com/2022/11/05/10-react-yuan-ma-jie-xi/"/>
    <id>http://example.com/2022/11/05/10-react-yuan-ma-jie-xi/</id>
    <published>2022-11-05T08:14:36.000Z</published>
    <updated>2022-11-12T08:14:42.392Z</updated>
    
    <content type="html"><![CDATA[<p>React 是一个网页UI框架,通过组件化的方式解决视图层开发复用的问题，本质是一个组件化框架。<br>他的核心设计思路有三点，分别是声明式、组件化与通用性<br>声明式的优势在于直观与组合<br>组件化的优势在于视图的拆分与模块复用，可以更容易做到高内聚低耦合<br>通用性在于一次学习，随处编写，将DOM抽象为虚拟DOM，开发者并不会直接操作DOM使得React不再局限于Web开发，适用范围广<br>劣势：技术选型和学习使用上造成了一定的成本。</p><p>JSX是一个JS的语法扩展，或者说是一个类似于XML的ECMAScript语法扩展<br>关注点分离<br>View = fn(props,state,context);</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;React 是一个网页UI框架,通过组件化的方式解决视图层开发复用的问题，本质是一个组件化框架。&lt;br&gt;他的核心设计思路有三点，分别是声明式、组件化与通用性&lt;br&gt;声明式的优势在于直观与组合&lt;br&gt;组件化的优势在于视图的拆分与模块复用，可以更容易做到高内聚低耦合&lt;br&gt;通用</summary>
      
    
    
    
    <category term="前端进阶" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="React" scheme="http://example.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>浏览器解析过程</title>
    <link href="http://example.com/2022/10/14/09-liu-lan-qi-jie-xi-guo-cheng/"/>
    <id>http://example.com/2022/10/14/09-liu-lan-qi-jie-xi-guo-cheng/</id>
    <published>2022-10-14T06:30:31.000Z</published>
    <updated>2022-11-12T08:15:49.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器解析过程"><a href="#浏览器解析过程" class="headerlink" title="浏览器解析过程"></a>浏览器解析过程</h1><ol><li>用户输入url并回车；</li><li>进行DNS解析获得IP： 先搜索浏览器自身dns缓存； 再找本机dns缓存；如找到且未过期则搜索停止，如未找到，则向本地配置的首选dns服务器发起域名解析请求，后续由运营商的dns服务器查到或进一步发送请求，直到拿到域名对应的ip并返回给浏览器；</li><li>发起TCP协议的三次握手：<ul><li>第一次握手：建立连接时，客户端发送syn(建立联机)包到服务器，并进入syn_send状态，等待服务器确认；</li><li>第二次握手：服务器收到syn包，确认包信息，同时自己也发送一个syn + ack(确认)包并进入syn_recv状态;</li><li>第三次握手：客户端收到syn+ack包，向服务器发送ack包，发送完后，客户端和服务器都进入established状态，完成三次握手；</li></ul></li><li>建立tcp连接后发起http请求；</li><li>服务器收到http请求并响应，浏览器收到http代码；</li><li>浏览器进行HTML文档解析并构建DOM树；</li><li>遇到css样式如link或style标签则开始解析css并构建样式树；（HTML解析和css解析相互独立）</li><li>遇到script标签则停止DOM解析并开始下载js并解析js，异步下载js的情况下，执行js仍会阻塞；</li><li>解析完dom树和样式树后进行渲染树（render tree）的构建；</li><li>渲染树构建后进行布局（Layout）</li><li>遍历渲染树，绘制页面。</li></ol><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器解析过程&quot;&gt;&lt;a href=&quot;#浏览器解析过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析过程&quot;&gt;&lt;/a&gt;浏览器解析过程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;用户输入url并回车；&lt;/li&gt;
&lt;li&gt;进行DNS解析获得IP： 先搜索浏览器自身dn</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="http://example.com/2022/10/08/08-liu-lan-qi-huan-cun/"/>
    <id>http://example.com/2022/10/08/08-liu-lan-qi-huan-cun/</id>
    <published>2022-10-08T02:21:35.000Z</published>
    <updated>2022-11-12T08:15:27.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-强缓存与协商缓存的含义"><a href="#1-强缓存与协商缓存的含义" class="headerlink" title="1. 强缓存与协商缓存的含义"></a>1. 强缓存与协商缓存的含义</h1><h2 id="1-1-什么是缓存"><a href="#1-1-什么是缓存" class="headerlink" title="1.1 什么是缓存"></a>1.1 什么是缓存</h2><p>我们常说的缓存，缓存一般都是根据浏览器来说的，当我们第一次访问网站的时候，程序会把网站上的图片和数据会下载到电脑上，如果我们再次访问网站的时候，网站就会从本地直接加载出来，这就是缓存。</p><h2 id="2-浏览器缓存是什么意思"><a href="#2-浏览器缓存是什么意思" class="headerlink" title="2.浏览器缓存是什么意思"></a>2.浏览器缓存是什么意思</h2><p>浏览器缓存是为了节约资源,并且可以加速浏览网站的速度,当用户第一次进行访问网页的时候,浏览器在用户磁盘上对请求的文档进行保存,当用户第二次访问的时候，就会从本地直接显示，从而提高了访问页面的速度。</p><h2 id="3-什么是强缓存"><a href="#3-什么是强缓存" class="headerlink" title="3.什么是强缓存"></a>3.什么是强缓存</h2><p>服务器通过设置http中header的Expires和cache-control字段告诉浏览器换存的有效期。这种方法会有一个固定时间，所带来的问题是如果服务器数据进行了更新，但是还没有到强缓存的过期时间，则数据无法更新<br>浏览器直接从本地缓存中获取数据，不与服务器进行交互.</p><p>协商缓存：浏览器发送请求到服务器，服务器判断是否可使用本地缓存。</p><p>3.1Expires<br>Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。<br>Expires的值是GMT格式的绝对时间，在设置的时间前浏览器会直接使用本地缓存。</p><p>3.2 cache-control<br>cache-control有12个值，其中的max-age值定义缓存的有效期，单位是秒，例如：cache-control：max-age=700，它表示缓存有效期为700秒，以消息的生成日期为基准，也就是header中的Date字段。</p><p>cache-control与Expires的区别在于cache-control的值是相对时间，而Expires是绝对时间，如果我们人为的修改了本地的时间，那么此时本地的时间与服务器上的时间不一致，就会导致缓存不能正确的被使用；而如果用相对时间，不管怎么改变本地的时间，缓存的有效期都不会改变。</p><p>4.什么是协商缓存<br>简单的说，协商缓存就是通过服务器来判断缓存是否可用。</p><p>4.1Last-Modified：<br>表示这个响应资源的最后修改时间，web服务器在响应请求时，告诉浏览器资源的最后修改时间。</p><p>If-Modified-Since：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示请求时间。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省浏览)，告知浏览器继续使用所保存的cache。</p><p>4.1 Etag/If-None-Match<br>Etag/If-None-Match也要配合Cache-Control使用。</p><p>Etag：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器觉得）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</p><p>If-None-Match：当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</p><p>二、缓存机制<br>缓存这东西，第一次必须获取到资源后，然后根据返回的信息来告诉如何缓存资源，可能采用的是强缓存，也可能告诉客户端浏览器是协商缓存，这都需要根据响应的header内容来决定的。下面用两幅图来描述浏览器的缓存是怎么玩的，让大家有个大概的认知。</p><p>浏览器第一次请求时：<br>image.png<br>浏览器后续在进行请求时：<br>image.png<br>那么前后端具体如何实现HTTP缓存？ 看下面<br>1.前端如何实现HTTP缓存：<br>前端设置http缓存,前端设置html页面缓存方法：静态的html页面想要设置使用缓存需要通过HTTP的META设置expires和cache-control</p><p>设置如下网页元信息:</p> <meta http-equiv="Cache-Control" content="max-age=7200"> <meta http-equiv="Expires" content="Mon, 20 Jul 2013 23:00:00 GMT">解答:<p>cache-control：||no-cache||no-store||max-age</p><p>1.no-cache：</p><p>表面意为“数据内容不被缓存”，而实际数据是被缓存到本地的，只是每次请求时候直接绕过缓存这一环节直接向服务器请求最新资源，由于浏览器解释不一样，</p><p>例如ie中我们设置了no-cache之后，请求虽然不会直接使用缓存，但是还会用缓存数据与服务器数据进行一致性检测(也就是说还是有几率会用到缓存的),</p><p>firefox中则完全无视no-cache存在，详细解释见no-store;</p><p>2.no-store：</p><p>指示缓存不存储此次请求的响应部分。与no-cache比较来说，一个是不用缓存，一个是不存储缓存;按理来说这个设置更加粗暴直接禁用缓存，</p><p>但是具体实现起来 浏览器之间差异却特别大，一般不会直接用该字段进行设置，不过no-store是为了防止缓存被恶意修改存储路径导致信息被泄露而设置的，</p><p>毕竟有它的用处，在firefox中实现缓存是通过文件另存为将缓存副本保存到本地，直接利用no-cache对其是无效的，如果加上no-store设置的话 则可以起到与no-cache一样的效果;</p><p>即：cache-control:no-cache,no-store;可以确保在支持http1.1版本中各大浏览器回车后退刷新无缓存；</p><p>再加上Pragma: no-cache设置兼容版本1.0即可(不过为了防止一致性检测时候的万一我们还是最好加上一致性检测的内容，如下所示几种方式)；</p><p>3.max-age：</p><p>例如Cache-control: max-age=3；表示此次请求成功后3秒之内发送同样请求不会去服务器重新请求，而是使用本地缓存；同样我们如果设置max-age=0表示立即抛弃缓存直接发送请求到服务器</p><p>以下内容来自:<a href="http://www.runoob.com/tags/att-meta-http-equiv.html">http://www.runoob.com/tags/att-meta-http-equiv.html</a></p><p>HTML <meta> 标签](<a href="http://www.runoob.com/tags/tag-meta.html">http://www.runoob.com/tags/tag-meta.html</a>)</p><p>实例<br>每隔 30 秒刷新一次文档：</p>   <meta http-equiv="refresh" content="30">所有主流浏览器都支持 http-equiv 属性。<p>定义和用法<br>http-equiv 属性提供了 content 属性的信息/值的 HTTP 头。</p><p>http-equiv 属性可用于模拟一个 HTTP 响应头。</p><p>HTML 4.01 与 HTML5之间的差异<br>使用 http-equiv 已经不是规定 HTML 文档的字符集的唯一方式：</p><p>HTML 4.01： <meta http-equiv="content-type" content="text/html; charset=UTF-8"><br>HTML5： <meta charset="UTF-8"><br>语法</p><meta http-equiv="content-type|default-style|refresh"><p>以下场景均不能做浏览器缓存：<br>1.HTTP信息头中包含Cache-Control:no-cache，pragma:no-cache，或Cache-Control:max-age=0等告诉浏览器不用缓存的请求<br>2.需要根据Cookie，认证信息等决定输入内容的动态请求是不能被缓存的<br>3.经过HTTPS安全加密的请求，也存在例外情况<br>4.POST请求无法被缓存<br>5.HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-强缓存与协商缓存的含义&quot;&gt;&lt;a href=&quot;#1-强缓存与协商缓存的含义&quot; class=&quot;headerlink&quot; title=&quot;1. 强缓存与协商缓存的含义&quot;&gt;&lt;/a&gt;1. 强缓存与协商缓存的含义&lt;/h1&gt;&lt;h2 id=&quot;1-1-什么是缓存&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="前端进阶" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>手写Promise</title>
    <link href="http://example.com/2022/09/18/07-promise/"/>
    <id>http://example.com/2022/09/18/07-promise/</id>
    <published>2022-09-18T04:34:08.000Z</published>
    <updated>2022-11-12T07:29:48.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>直接上手写代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PENDDING <span class="token operator">=</span> <span class="token string">'pendding'</span><span class="token punctuation">;</span><span class="token keyword">const</span> FULFILED <span class="token operator">=</span> <span class="token string">'fulfiled'</span><span class="token punctuation">;</span><span class="token keyword">const</span> REJECTED <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> PENDDING<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> PENDDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> FULFILED<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> PENDDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> REJECTED<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">then</span><span class="token punctuation">(</span>onFulfiled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onFulfiled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfiled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onFulfiled <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> resolvePromise <span class="token operator">=</span> <span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'chaining cycle detected for promise '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> FULFILED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfiled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> REJECTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> PENDDING<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当执行器异步时，需要记录回调函数，等待执行器执行完毕后再执行函数</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfiled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rejectValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> addData <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token function">addData</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">addData</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;直接上手写代码&lt;/p&gt;
&lt;pre class=&quot; language-js&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS深浅复制</title>
    <link href="http://example.com/2022/09/10/06-js-shen-qian-fu-zhi/"/>
    <id>http://example.com/2022/09/10/06-js-shen-qian-fu-zhi/</id>
    <published>2022-09-10T09:29:36.000Z</published>
    <updated>2022-11-12T07:29:32.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅拷贝、深拷贝和赋值的区别"><a href="#浅拷贝、深拷贝和赋值的区别" class="headerlink" title="浅拷贝、深拷贝和赋值的区别"></a>浅拷贝、深拷贝和赋值的区别</h1><p>当我们把一个对象赋值给另一个新的变量时，赋的其实是对象在栈中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p><p>浅拷贝：重新在堆中创建内存，拷贝前后对象的基本数据类型互不影响，而引用类型相互影响。</p><p>深拷贝：从堆内存中开辟一个新的区域存放新对象，对对象中的子对象进行递归拷贝，拷贝前后的两个对象互不影响</p><h1 id="浅拷贝的实现方式"><a href="#浅拷贝的实现方式" class="headerlink" title="浅拷贝的实现方式"></a>浅拷贝的实现方式</h1><ol><li>Object.assign();</li><li>展开运算符：{…obj}</li><li>Array.prototype.concat();</li><li>Array.prototype.slice();</li></ol><h1 id="深拷贝的实现方式"><a href="#深拷贝的实现方式" class="headerlink" title="深拷贝的实现方式"></a>深拷贝的实现方式</h1><ol><li><p>JSON.parse(JSON.stringify());</p><p> 缺点：函数变为null,正则变为{};</p></li><li><p>lodash：cloneDeep函数</p></li><li><p>递归实现</p></li></ol><pre class=" language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基本类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解决循环引用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hash<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cloneObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cloneObj<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浅拷贝、深拷贝和赋值的区别&quot;&gt;&lt;a href=&quot;#浅拷贝、深拷贝和赋值的区别&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝、深拷贝和赋值的区别&quot;&gt;&lt;/a&gt;浅拷贝、深拷贝和赋值的区别&lt;/h1&gt;&lt;p&gt;当我们把一个对象赋值给另一个新的变量时，赋的其实是对</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2022/09/01/05-shu-ju-jie-gou/"/>
    <id>http://example.com/2022/09/01/05-shu-ju-jie-gou/</id>
    <published>2022-09-01T09:29:36.000Z</published>
    <updated>2022-11-12T07:29:21.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>时间复杂度是一个函数，它定性描述该算法的运行时间，在软件开发中，时间复杂度就是用来方便开发者估算出程序运行时间，通常用算法的操作单元数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率呈现一定的关系，这称作为算法的渐近时间复杂度，简称时间复杂度，记为 O(f(n))，其中n指的是指令集的数目。</p><h2 id="什么是大O"><a href="#什么是大O" class="headerlink" title="什么是大O"></a>什么是大O</h2><p>大O用来表示算法执行时间的上界，也可以理解为最差情况下运行的时间，数据量和顺序等情况对算法的执行时间有非常大的影响，这里假设的是某个输入数据用该算法运行的时间，比其他数据的运算时间都要长。</p><h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><p>空间复杂度指的是算法在运行过程中所占存储空间的大小，空间复杂度(Space Complexity)记作S(n) ，依然使用大O来表示。利用程序的空间复杂度，可以对程序运行中需要多少内存有个预先估计。</p><h2 id="常见的空间复杂度"><a href="#常见的空间复杂度" class="headerlink" title="常见的空间复杂度"></a>常见的空间复杂度</h2><p>一维数组空间，如果存储了n个元素，空间复杂度O(n)<br>二维数组空间，总共有n个数组，每个数组存储了n个元素，空间复杂度O(n^2)<br>常数空间复杂度O(1)</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>英文：Dynamic Programming，简称DP，将问题分解为互相重叠的子问题，通过反复求解子问题来解决原问题就是动态规划，如果某一问题有很多重叠子问题，使用动态规划来解是比较有效的。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; title=&quot;时间复杂度&quot;&gt;&lt;/a&gt;时间复杂度&lt;/h1&gt;&lt;p&gt;时间复杂度是一个函数，它定性描述该算法的运行时间，在软件开发中，时间复杂度就是用来方便开发者估算出程序运行时间，通常</summary>
      
    
    
    
    <category term="前端进阶" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS梳理</title>
    <link href="http://example.com/2022/08/30/04-js-shu-li/"/>
    <id>http://example.com/2022/08/30/04-js-shu-li/</id>
    <published>2022-08-30T07:37:35.000Z</published>
    <updated>2022-11-12T07:29:09.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS的特点"><a href="#JS的特点" class="headerlink" title="JS的特点"></a>JS的特点</h1><div class="row">    <embed src="../../../../pdf/JS的特点.pdf" width="100%" height="550" type="application/pdf"></div><h1 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h1><div class="row">    <embed src="../../../../pdf/JavaScript的组成.pdf" width="100%" height="550" type="application/pdf"></div><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS的特点&quot;&gt;&lt;a href=&quot;#JS的特点&quot; class=&quot;headerlink&quot; title=&quot;JS的特点&quot;&gt;&lt;/a&gt;JS的特点&lt;/h1&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;../../../../pdf/JS的特点.pd</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS梳理</title>
    <link href="http://example.com/2022/08/10/03-css-shu-li/"/>
    <id>http://example.com/2022/08/10/03-css-shu-li/</id>
    <published>2022-08-10T11:53:23.000Z</published>
    <updated>2022-11-12T07:28:58.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS：层叠样式表"><a href="#CSS：层叠样式表" class="headerlink" title="CSS：层叠样式表"></a>CSS：层叠样式表</h1><pre><code>由选择符和声明组成</code></pre><h2 id="样式引入"><a href="#样式引入" class="headerlink" title="样式引入"></a>样式引入</h2><pre><code>内部样式：&lt;style&gt;&lt;/style&gt;标签，一般在head标签内    副作用：外部样式：(结构样式分离，推荐使用)    link标签：        rel：'stylesheet'        type：'text/css'        href：路径        区别：            属于XHTML标签            link引用的CSS会同时被加载    style标签：        @import url("路径")        区别：            CSS提供的一种方式            全部下载完再被加载            出来的时间有点老，只在IE5以上才能识别行内样式：    style作为属性直接写在标签后面样式优先级(就近原则)    内联样式最优先；外部和内部一样，看谁覆盖，一般先写外部再写内部    ！important：开挂加权重</code></pre><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><pre><code>标签选择器（element选择器）    eg：div{属性名：属性值}    以文档语言对象作为选择器，即使用结构总中元素名称作为选择符类选择器    eg：.class名{属性：属性值}    &lt;style&gt;        a{            color:red        }        b{            color:yellow        }    &lt;/style&gt;    &lt;div class="a b"&gt;&lt;/div&gt;    标签里的属性可设置多个，样式优先级看style里的属性位置id选择器    #id名{属性：属性值}    唯一性通配符选择器    *{属性：属性值}    一般用来格式化内外边距群组选择器    , 合并选择器，节约代码量后代选择器    空格伪类选择器    :link{属性：属性值} 初始状态    :visited{属性：属性值} 被访问后状态    :hover{属性：属性值} 鼠标悬浮状态    :active{属性：属性值} 激活时状态，即鼠标按下状态    书写顺序：link-visited-hover-active选择器的权重    !important      10000    内联            1000    id              100    class           10    元素(标签)       1    包含选择符      权重之和比较，但不会越级规则    当不同选择符的样式设置有冲突的时候，高权重选择符的样式会覆盖低权重选择符的样式    相同权重的选择符，样式遵循就近原则：那个选择符最后定义，就采用那个选择符样式</code></pre><h2 id="文本属性：font"><a href="#文本属性：font" class="headerlink" title="文本属性：font"></a>文本属性：font</h2><pre><code>    font-size：字体大小;单位是px，浏览器默认是16px，设计图常用字号是12px    font-family：字体;    color:字体颜色    font-weight：加粗    font-style：倾斜 italic(倾斜)/oblique(倾斜的字体)/normal（正常）    text-align：文本水平对齐        left        right        center        justify    line-height：行高    text-indent:首行缩进，只对第一行起作用    letter-spacing：字间距    word-spacing:词间距    text-decoration：文本修饰    text-transform：文本大小写转换    font：文字简写        #font-style  #font-weight font-size/line-height font-family（加#可省略）</code></pre><h2 id="列表属性：list-style"><a href="#列表属性：list-style" class="headerlink" title="列表属性：list-style"></a>列表属性：list-style</h2><pre><code>list-style-type：定义列表符合样式    disc，circle，square，nonelist-style-image：将图片设置为列表符合样式    url();list-style-position：设置列表项放置位置是否在li标签内    outside    insidelist-style：简写      list-style-type list-style-image  list-style-position;顺序无所谓</code></pre><h2 id="背景属性：background"><a href="#背景属性：background" class="headerlink" title="背景属性：background"></a>背景属性：background</h2><pre><code>background-color：背景颜色background-image：背景图片    url()background-repeat：背景图片的平铺    repeat/norepeat/repeat-x/repeat-ybackground-position：背景图片的定位    上 右background-size：图片大小    cover把背景图形扩展至足够大，以使背景图形完全覆盖背景区域，有可能会裁掉一部分    contain：把图像等比例放置最大background-attachment：背景图片的固定方式   一般用于视觉差    fixed：相对于浏览器视口固定    scroll：相对于网页整体固定background:color image repeat position attachment;顺序无所谓，可单独设置某一个值</code></pre><h2 id="浮动属性：float"><a href="#浮动属性：float" class="headerlink" title="浮动属性：float"></a>浮动属性：float</h2><pre><code>属性    left    right    none作用    定义网页中其他文本如何环绕该元素显示    就是让竖着的东西横着来    脱离默认文档流    见缝插针副作用    高度塌陷：由于子元素脱离默认文档流而撑不起来父元素解决方案：    1. 父元素写死宽高    2. overflow：hidden        引发BFC，让浮动元素重新计算高度    3. 清除浮动        设置于浮动元素之后        clear：none/both/left/right</code></pre><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><pre><code>W3C盒模型    上下左右    上下 左右    上 左右 下    上 右 下 左    内边距        padding        不支持负数    边框        border            border-width            border-color            border-style    外边距        margin        支持负数        子盒子不知道父元素的边距        1.子元素的margin给父盒子的padding，注意高度计算        2.给父元素设置边框        3.加浮动，父子加皆可        4.overflow：hidden BFC</code></pre><h2 id="溢出属性"><a href="#溢出属性" class="headerlink" title="溢出属性"></a>溢出属性</h2><pre><code>overflow    visible：默认值，溢出内容显示在元素之外    hidden：溢出内容隐藏    scroll：滚动    auto：如果溢出加滚动条，没有溢出正常显示    inherit：规定应该遵从父元素继承overflow属性的值    overflow-x：X轴溢出    overflow-y：Y轴溢出white-space    normal：忽略空白    nowrap：不折行    pre：保留标签内文本间隔样式    pre-wrap：保留标签内折行    pre-line：不保留空格    inherit：继承text-overflow    clip：默认，不显示省略号    ellipsis：省略号</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS：层叠样式表&quot;&gt;&lt;a href=&quot;#CSS：层叠样式表&quot; class=&quot;headerlink&quot; title=&quot;CSS：层叠样式表&quot;&gt;&lt;/a&gt;CSS：层叠样式表&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;由选择符和声明组成
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;样式</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML梳理</title>
    <link href="http://example.com/2022/08/01/02-html-shu-li/"/>
    <id>http://example.com/2022/08/01/02-html-shu-li/</id>
    <published>2022-08-01T11:53:23.000Z</published>
    <updated>2022-11-12T07:28:46.844Z</updated>
    
    <content type="html"><![CDATA[<p><strong>HTML 全称：’Hyper Text Markup Language’(超文本标记语言)</strong></p><p>HTML的基本语法：<br>    1.常规标记<br>    2.空标记</p><h1 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h1><ol><li>样式丢失时还能保持结构</li><li>利于爬虫SEO搜索</li><li>方便阅读维护</li></ol><h1 id="DOCTYPE"><a href="#DOCTYPE" class="headerlink" title="DOCTYPE"></a>DOCTYPE</h1><p>文档声明标签<br><code>&lt;!DOCTYPE html&gt;</code></p><h1 id="html标签"><a href="#html标签" class="headerlink" title="html标签"></a>html标签</h1><p><code>&lt;html lang='en'&gt;&lt;/html&gt;</code><br>‘en’:英文; ‘zh-CN’:中文; ‘ja-jp’:日文</p><h1 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h1><p><code>&lt;meta charset='***'&gt;</code><br>UTF-8</p><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><ol><li>文本标签 &lt;hn&gt;&lt;/hn&gt;</li><li>段落标签 &lt;p&gt;&lt;/p&gt; </li><li>换行标签 &lt;br/&gt;</li><li>水平线标签 &lt;hr/&gt; <hr></li><li>文字加粗标签<br> &lt;b&gt;&lt;/b&gt; <b>b标签</b><br> &lt;strong&gt;&lt;/strong&gt; <strong>strong标签</strong> </li><li>倾斜标签<br> &lt;em&gt;&lt;/em&gt; <em>em标签</em><br> &lt;i&gt;&lt;/i&gt; <i>i标签</i> </li><li>删除线标签<br> &lt;s&gt;&lt;/s&gt; <s>s标签</s><br> &lt;del&gt;&lt;/del&gt; <del>del标签</del> </li><li>扩展<br> &lt;u&gt;&lt;/u&gt; <u>下划线</u><br> &lt;sup&gt;&lt;/sup&gt; <sup>上标</sup><br> &lt;sub&gt;&lt;/sub&gt; <sub>下标</sub></li></ol><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><pre><code>&amp;lt;   :  &lt;&amp;gt;   :  &gt;&amp;nbsp; :  空格 宽度受字体影响&amp;emsp; :  空格 宽度为一个中文的宽度&amp;copy; :  版权&amp;trade :  商标&amp;reg;  :  商标</code></pre><h1 id="div和span"><a href="#div和span" class="headerlink" title="div和span"></a>div和span</h1><pre><code>div：块级元素    没有具体含义，用来划分页面的区域，独占一行    自上而下排列    可定义宽高    eg：div p ul li ol dl dt dd h1-6span：行内元素    没有实际意义，主要用在文本样式修改时候，内容有多宽就占用多宽的空间距离    不可定义宽高    margin、padding的left、right可以设置    eg：a b em i span strong等行内元素：    eg： img input</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><pre><code>有序列表(order list)    ol&gt;li    ol里面可以随意放标签，但是ol里面只能放置li    数字是自动生成的    属性        type:1,a,A,i,I        start:取值只能是一个数字无序列表(Unordered list)    ul&gt;li    ul里面只能放li，li里面可以放其他标签    默认是黑色的实心圆    属性：        type：disc，circle，square，none自定义列表    dl&gt;dt|dd</code></pre><h1 id="图片标签的路径"><a href="#图片标签的路径" class="headerlink" title="图片标签的路径"></a>图片标签的路径</h1><pre><code>img标签src    绝对路径是指文件在硬盘上真正存在的路径    相对路径就是相对于自己的目标文件位置</code></pre><h1 id="图片标签的属性"><a href="#图片标签的属性" class="headerlink" title="图片标签的属性"></a>图片标签的属性</h1><pre><code>src：路径信息title：鼠标悬停上去的提示信息alt：图片加载失败的提示信息width：宽度height：高度</code></pre><h1 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h1><pre><code>实现不同页面的跳转属性    href:跳转链接    title：鼠标悬浮提示    target：打开方式        _self:默认值，本页面打开        _blank:新窗口打开</code></pre><h1 id="table表格"><a href="#table表格" class="headerlink" title="table表格"></a>table表格</h1><pre><code> tr:行(table row) td:列表格属性    width：宽度    height：高度    border：边框    bordercolor：边框颜色    bgcolor：背景颜色    align：水平对齐    cellspacing：单元格之间的间距    cellpadding：单元格内边距tr属性(width不生效)    height：高度    bgcolor：背景颜色    align：文字水平对齐    valign：文字垂直对齐td属性    width：宽度 （影响一整列）    height：高度 （影响一整行）    bgcolor：背景颜色    align：文字水平对齐    valign：文字垂直对齐表格合并    colspan：合并列数，必须是td    rowspan：合并行数，必须是td表单标签    form标签        action：传输数据地址        method：方法post、get            get                是从服务器上获取数据                把参数数据队列加到提交表单的ACTION所指的URL中，值和表单内字段一一对应，在URL中可以看到。                Request.QueryString获取                传输数据量小，不能大于2KB                安全性低，效率好            post                是向服务器传送数据                通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION所指的URL地址，用户看不见整个过程。                Request.Query获取                数据量大，最大80KB                安全性高        input标签            type：                text:文本框                submit：提交框                button：按钮框                reset：重置框                password：密码框            placeholder：描述输入字段预期值的简短的提示信息兼容到IE8以上            name：必须设置，后端获取的key值            value：按钮显示值</code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;HTML 全称：’Hyper Text Markup Language’(超文本标记语言)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTML的基本语法：&lt;br&gt;    1.常规标记&lt;br&gt;    2.空标记&lt;/p&gt;
&lt;h1 id=&quot;HTML语义化&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="HTML" scheme="http://example.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://example.com/2022/07/31/01-markdown/"/>
    <id>http://example.com/2022/07/31/01-markdown/</id>
    <published>2022-07-31T09:29:36.000Z</published>
    <updated>2022-11-12T07:28:35.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h1><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-表示标题，其中-号必须在行首，例如："><a href="#1-使用-表示标题，其中-号必须在行首，例如：" class="headerlink" title="1.使用#表示标题，其中#号必须在行首，例如："></a>1.使用<code>#</code>表示标题，其中#号必须在行首，例如：</h3><h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h3 id="三号标题"><a href="#三号标题" class="headerlink" title="三号标题"></a>三号标题</h3><h4 id="四号标题"><a href="#四号标题" class="headerlink" title="四号标题"></a>四号标题</h4><h5 id="五号标题"><a href="#五号标题" class="headerlink" title="五号标题"></a>五号标题</h5><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6><hr><h2 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h2><p>使用三个或以上的<code>-</code>或者<code>*</code>表示<br>且这一行只有符号，注意不要被识别为二级标题即可，例如中间或者前面可以加空格</p><hr><hr><h2 id="三、斜体和粗体"><a href="#三、斜体和粗体" class="headerlink" title="三、斜体和粗体"></a>三、斜体和粗体</h2><p>使用<code>*</code>和<code>**</code>分别表示斜体和粗体，例如<br><em>斜体</em> <strong>粗体</strong> <em><strong>又斜又粗</strong></em></p><p>扩展：<br>删除线使用两个<code>~</code>表示：<br><del>我是要删掉的文字</del></p><hr><h2 id="四、超链接和图片"><a href="#四、超链接和图片" class="headerlink" title="四、超链接和图片"></a>四、超链接和图片</h2><p>链接和图片的写法类似，图片仅在超链接前多了一个 ! ，一般是 [文字描述] (链接)例如：<br><a href="https://www.baidu.com/">百度</a><br><img src="/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片描述"></p><hr><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用<code>-</code>、<code>+</code>和<code>#</code>表示无序列表<br>例如</p><ul><li>一层<ul><li>二层<ul><li>三层</li></ul></li></ul></li></ul><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用<code>1. </code>（点号后面有个空格）表示有序列表，可嵌套。</p><ol><li>一层<ol><li>二层</li><li>二层</li></ol></li><li>一层</li></ol><hr><h2 id="七、文字引用"><a href="#七、文字引用" class="headerlink" title="七、文字引用"></a>七、文字引用</h2><p>使用 <code>&gt;</code> 表示，可以有多个 &gt;，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层<br>这样是跳不出去的</p><blockquote><p>更深一层</p></blockquote></blockquote></blockquote><blockquote><p>跳出去</p></blockquote><hr><h2 id="八、行内代码块"><a href="#八、行内代码块" class="headerlink" title="八、行内代码块"></a>八、行内代码块</h2><p>`表示 <code>行内代码块</code></p><hr><h2 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h2><p>使用四个空格缩进表示代码块，一些 IDE 支持行数提示和着色，一般使用三个 ` 表示，例如</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HELLO WORLD!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><p>直接看例子，第二行的<code>---</code>表示了对齐方式</p><table><thead><tr><th>商品</th><th align="right">数量</th><th align="center">单价</th></tr></thead><tbody><tr><td>苹果</td><td align="right">10</td><td align="center">$1</td></tr><tr><td>电脑</td><td align="right">1</td><td align="center">$100</td></tr></tbody></table><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;markdown&quot;&gt;&lt;a href=&quot;#markdown&quot; class=&quot;headerlink&quot; title=&quot;markdown&quot;&gt;&lt;/a&gt;markdown&lt;/h1&gt;&lt;h2 id=&quot;一、标题&quot;&gt;&lt;a href=&quot;#一、标题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端基础" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
